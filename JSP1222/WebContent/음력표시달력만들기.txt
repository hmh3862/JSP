음력이 표시되는 달력을 만들어 보자
----------------------------------
1. 음력을 어떻게 구하지?
   한국 천문 연구원에서 알려주는 음력을 가져다 쓰자!!!!
   
   아래의 주소를 이용하면된다. 월을 반드시 두자리로 해줘야 한다.
   https://astro.kasi.re.kr/life/pageView/5?search_year=2022&search_month=01
   
2. 위에 있는 URL에서 음력을 가져와보자!! --- HTML파서를 이용하여 가져와보자
   Jsoup라이브러리가 필요하겠군 -- 다운로드를 받아 WEB-INF/lib폴더에 넣는다.
   
3. Gson라이브러리를 이용하여 읽어온 음력데이터를 저장해보자
   Gson라이브러리가 필요하겠군 -- 다운로드를 받아 WEB-INF/lib폴더에 넣는다.
   
4. 현재 년/월의 음력데이터를 읽어서 json으로 저장해보자!!!
   테스트용이므로 웹이 아닌 자바로 만들어 보자
   1) json으로 저장하기위해서 VO가 필요하다.      
   ===================================================================================================
	package kr.green.lunar.vo;
	
	public class LunarVO {
		private String solar; // 양력
		private String lunar; // 음력
		private String ganji; // 간지
		
		// Getter & Setter를 만들자
		public String getSolar() {
			return solar;
		}
		public void setSolar(String solar) {
			this.solar = solar;
		}
		public String getLunar() {
			return lunar;
		}
		public void setLunar(String lunar) {
			this.lunar = lunar;
		}
		public String getGanji() {
			return ganji;
		}
		public void setGanji(String ganji) {
			this.ganji = ganji;
		}
		
		@Override
		public String toString() {
			return solar + "(" + lunar + ", " + ganji + ")";
		}
		// 필요한 메서드를 추가해보자
		// 양력을 분해해 보자
		// 2022-01-01 (토)
		// 1. 년도
		public String getSolarYear() {
			return solar.split("-")[0]; // -로 구분하여 배열을 만들고 첫번째 값은 연도다.
		}
		// 2. 월
		public String getSolarMonth() {
			return solar.split("-")[1]; // -로 구분하여 배열을 만들고 두번째 값은 월이다.
		}
		// 3. 일
		public String getSolarDate() {
			return solar.split("-")[2].split(" ")[0]; // -로 구분하여 세번째 다시 공백으로 구분하여 첫번째 
		}
		// 4. 요일(숫자)
		public int getSolarIntWeek() {
			String week = "일월화수목금토일";
			return week.indexOf(solar.split("-")[2].split(" ")[1].charAt(1));
		}
		// 5. 요일(문자)
		public String getSolarWeek() {
			return solar.split("-")[2].split(" ")[1].charAt(1)+""; 
		}
		
		// 음력을 분해해 보자
		// 2021-11-29
		// 1. 년도
		public String getLunarYear() {
			return lunar.split("-")[0]; // -로 구분하여 배열을 만들고 첫번째 값은 연도다.
		}
		// 2. 월
		public String getLunarMonth() {
			return lunar.split("-")[1]; // -로 구분하여 배열을 만들고 두번째 값은 월이다.
		}
		// 3. 일
		public String getLunarDate() {
			return lunar.split("-")[2]; // -로 구분하여 세번째 
		}
		
		// 간지를 구분해 보자
		// 세차        월건       일진
		// 신축(辛丑)년 경자(庚子)월 갑인(甲寅)일
		// 윤년의 경우 월건이 없다. 
		// 기축(己丑)년 정미(丁未)일
		// 1. 세차를 구해보자!!!
		public String getGanjiYearK() { // 세차를 한글로
			return ganji.split(" ")[0].substring(0, 2);
		}
		public String getGanjiYearH() { // 세차를 한자로
			return ganji.split(" ")[0].substring(3, 5);
		}
		// 2. 월건을 구해보자
		public String getGanjiMonthK() { // 월건를 한글로
			if(ganji.split(" ").length==3) { // 년월이 모두 있는 경우
				return ganji.split(" ")[1].substring(0, 2);
			}else { // 윤달인 경우
				return "";
			}
		}
		public String getGanjiMonthH() { // 월건를 한자로
			if(ganji.split(" ").length==3) { // 년월이 모두 있는 경우
				return ganji.split(" ")[1].substring(3, 5);
			}else { // 윤달인 경우
				return "";
			}
		}
		// 3. 일진을 구해보자
		public String getGanjiDateK() { // 일진을 한글로
			if(ganji.split(" ").length==3) { // 년월이 모두 있는 경우
				return ganji.split(" ")[2].substring(0, 2);
			}else { // 윤달인 경우
				return ganji.split(" ")[1].substring(0, 2);
			}
		}
		public String getGanjiDateH() { // 일진을 한자로
			if(ganji.split(" ").length==3) { // 년월이 모두 있는 경우
				return ganji.split(" ")[2].substring(3, 5);
			}else { // 윤달인 경우
				return ganji.split(" ")[1].substring(3, 5);
			}
		}
	}
   ===================================================================================================
   2) VO를 테스트해보자
   ===================================================================================================
	package kr.green.lunar.app;
	
	import kr.green.lunar.vo.LunarVO;
	
	public class LunarTest1 {
		public static void main(String[] args) {
			LunarVO vo = new LunarVO();
			vo.setSolar("2009-07-01 (수)");
			vo.setLunar("2009-05-09 (윤)");
			vo.setGanji("기축(己丑)년 정미(丁未)일");
			
			System.out.println(vo.getSolarYear() + "년");
			System.out.println(vo.getSolarMonth() + "월");
			System.out.println(vo.getSolarDate() + "일");
			System.out.println(vo.getSolarWeek() + "요일(" + vo.getSolarIntWeek() + ")" );
			System.out.println();
			
			System.out.println(vo.getLunarYear()+ "년");
			System.out.println(vo.getLunarMonth() + "월");
			System.out.println(vo.getLunarDate() + "일");
			System.out.println();
			
			System.out.println(vo.getGanjiYearK());
			System.out.println(vo.getGanjiYearH());
			System.out.println(vo.getGanjiMonthH());
			System.out.println(vo.getGanjiMonthK());
			System.out.println(vo.getGanjiDateH());
			System.out.println(vo.getGanjiDateK());
			System.out.println();
			
			vo.setGanji("임인(壬寅)년 병오(丙午)월 을유(乙酉)일");
			System.out.println(vo.getGanjiYearK());
			System.out.println(vo.getGanjiYearH());
			System.out.println(vo.getGanjiMonthH());
			System.out.println(vo.getGanjiMonthK());
			System.out.println(vo.getGanjiDateH());
			System.out.println(vo.getGanjiDateK());
			System.out.println();		
		}
	}
   ===================================================================================================
   3) 음력데이터를 읽어서 화면에 출력해 보자
      3-1. WebContent폴더 밑에 Json파일을 저장할 폴더(lunarData)를 만들자
      3-2. 일단을 읽어서 화면에 출력해보자 
   ===================================================================================================
	LunarReadEx01.jsp
	--------------------------------------------------------------------------------------------------
	<%@page import="org.jsoup.Jsoup"%>
	<%@page import="org.jsoup.nodes.Document"%>
	<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	<!DOCTYPE html>
	<html>
	<head>
	<meta charset="UTF-8">
	<title>음력데이터를 읽어보자</title>
	<style type="text/css">
		table {
			width: 80%; margin: auto;
		}
	</style>
	</head>
	<body>
		<%
			String urlAddress = "https://astro.kasi.re.kr/life/pageView/5";
			// 해당 URL에 접속하여 문서를 얻어온다.
			Document document = Jsoup.connect(urlAddress).get();
			// 문서중에서 원하는 부분만 가져오자
			out.println("<table border='1'>");
			out.println(document.select("table tbody").get(0).html());
			out.println("</table>");
		%>
	</body>
	</html>
   ===================================================================================================
   3-3. 위처럼 읽으면 활용할 수 없다. 읽어서 VO에 넣어야 한다.
   ===================================================================================================
 	LunarReadEx02.jsp
	--------------------------------------------------------------------------------------------------
	<%@page import="java.io.File"%>
	<%@page import="java.io.PrintWriter"%>
	<%@page import="com.google.gson.Gson"%>
	<%@page import="org.jsoup.select.Elements"%>
	<%@page import="org.jsoup.nodes.Element"%>
	<%@page import="java.util.ArrayList"%>
	<%@page import="kr.green.lunar.vo.LunarVO"%>
	<%@page import="java.util.List"%>
	<%@page import="org.jsoup.Jsoup"%>
	<%@page import="org.jsoup.nodes.Document"%>
	<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	<!DOCTYPE html>
	<html>
	<head>
	<meta charset="UTF-8">
	<title>음력데이터를 읽어보자</title>
	<style type="text/css">
		table {
			width: 80%; margin: auto;
		}
	</style>
	</head>
	<body>
		<%
			String urlAddress = "https://astro.kasi.re.kr/life/pageView/5";
			// 해당 URL에 접속하여 문서를 얻어온다.
			Document document = Jsoup.connect(urlAddress).get();
			// 문서중에서 원하는 부분만 가져오자
			List<LunarVO> list = new ArrayList<>();
			
			Elements elements = document.select("table tbody tr"); // tr들을 복수로 얻기
			for(Element e : elements){ // 반복
				// 1줄이 날짜 하나이다.
				LunarVO vo = new LunarVO();
				// vo를 채워주자
				vo.setSolar(e.select("td").get(0).text()); // tr안의 td중 첫번째가 양력이다.
				vo.setLunar(e.select("td").get(1).text());
				vo.setGanji(e.select("td").get(2).text());
				out.println(vo + "<br>"); // 되는지 출력만 해보자
				list.add(vo); // 날짜 한개를 리스트에 추가
			}
			out.println(list.size() + "개 읽음<br>");
			
			// JSON 파일로 저장해보자!!!!
			
			String path = application.getRealPath("lunarData"); // 서버의 절대 경로 구하기
			out.println("저장 경로 : " + path + "<br>");
			String fileName = list.get(0).getSolarYear() +  list.get(0).getSolarMonth() + ".json";
			
			Gson gson = new Gson();
			PrintWriter pw = new PrintWriter(path + File.separator + fileName);
			gson.toJson(list, pw);
			pw.flush();
			pw.close();
			out.println(path + File.separator + fileName + "저장 완료!!!<br>");
		%>
	</body>
	</html>  
   ===================================================================================================
   3-4. 매번 이렇게 할것이 아니라 유틸리티 클래스를 만들어 놓자
        경로, 년도, 월을 입력받아 List를 리턴하는 클래스를 만들어 보자!!
   ===================================================================================================
	package kr.green.lunar.vo;
	
	import java.io.File;
	import java.io.FileNotFoundException;
	import java.io.FileReader;
	import java.io.IOException;
	import java.io.PrintWriter;
	import java.util.ArrayList;
	import java.util.List;
	
	import org.jsoup.Jsoup;
	import org.jsoup.nodes.Document;
	import org.jsoup.nodes.Element;
	import org.jsoup.select.Elements;
	
	import com.google.gson.Gson;
	import com.google.gson.reflect.TypeToken;
	
	public class LunarUtil {
		public static List<LunarVO> getLunarData(String path, int year, int month){
			List<LunarVO> list = null;
			String fileName = String.format("%04d%02d.json", year, month); // 파일이름
			// 이미 json파일이 있다면 json파일을 읽어서 리턴하고
			File file = new File(path + File.separator + fileName);
			if(file.exists()) {
				Gson gson = new Gson();
				FileReader fr = null;
				try {
					fr = new FileReader(file);
					list = gson.fromJson(fr, new TypeToken<List<LunarVO>>() {}.getType());
				} catch (FileNotFoundException e) {
					e.printStackTrace();
				} finally {
					try {
						if(fr!=null) fr.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			}else {
				// json파일이 없다면 인터넷에서 읽어서 리턴하자!!!
				String date = String.format("?search_year=%04d&search_month=%02d", year, month);
				String urlAddress = "https://astro.kasi.re.kr/life/pageView/5" + date;
				// 해당 URL에 접속하여 문서를 얻어온다.
				try {
					Document document = Jsoup.connect(urlAddress).get();
					list = new ArrayList<LunarVO>();
					Elements elements = document.select("table tbody tr"); // tr들을 복수로 얻기
					for(Element e : elements){ // 반복
						// 1줄이 날짜 하나이다.
						LunarVO vo = new LunarVO();
						// vo를 채워주자
						vo.setSolar(e.select("td").get(0).text()); // tr안의 td중 첫번째가 양력이다.
						vo.setLunar(e.select("td").get(1).text());
						vo.setGanji(e.select("td").get(2).text());
						list.add(vo); // 날짜 한개를 리스트에 추가
					}
					System.out.println(list.size() + "개 읽음!!!");
					
					System.out.println("저장 경로 : " + path + "<br>");
					fileName = list.get(0).getSolarYear() +  list.get(0).getSolarMonth() + ".json";
					
					Gson gson = new Gson();
					PrintWriter pw = new PrintWriter(path + File.separator + fileName);
					gson.toJson(list, pw);
					pw.flush();
					pw.close();
					System.out.println(path + File.separator + fileName + "저장 완료!!!<br>");
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
			return list;
		}
	}
   ===================================================================================================
   3-5. 만든 유틸리티 클래스를 테스트해보자!!!
   ===================================================================================================
   LunarReadEx03.jsp
   ---------------------------------------------------------------------------------------------------
	<%@page import="kr.green.lunar.vo.LunarUtil"%>
	<%@page import="kr.green.lunar.vo.LunarVO"%>
	<%@page import="java.util.List"%>
	<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	<!DOCTYPE html>
	<html>
	<head>
	<meta charset="UTF-8">
	<title>음력데이터를 읽어보자</title>
	<style type="text/css">
		table {
			width: 80%; margin: auto;
		}
	</style>
	</head>
	<body>
		<%
			List<LunarVO> list = LunarUtil.getLunarData(application.getRealPath("lunarData"), 2022, 1);
			for(LunarVO vo : list){
				out.println(vo + "<br>");
			}
			out.println("<hr>");
			
			list = LunarUtil.getLunarData(application.getRealPath("lunarData"), 2002, 8);
			for(LunarVO vo : list){
				out.println(vo + "<br>");
			}
			out.println("<hr>");
	
		%>
	</body>
	</html>   
   ===================================================================================================
   
 4. 이제 음력 달력을 출력해 보자!!!!
   ===================================================================================================
	CalendarEx.jsp
   ---------------------------------------------------------------------------------------------------
	<%@page import="kr.green.lunar.vo.LunarUtil"%>
	<%@page import="kr.green.lunar.vo.LunarVO"%>
	<%@page import="java.util.List"%>
	<%@page import="java.time.DayOfWeek"%>
	<%@page import="java.time.LocalDate"%>
	<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
	<!DOCTYPE html>
	<html>
	<head>
	<meta charset="UTF-8">
	<title>JSP 만년달력</title>
	<style type="text/css">
		table {	width: 700px;margin: auto; border: none;}
		.title {font-size: 24pt; text-align: center; border: none;background-color: white;}
		th { border: 1px solid gray; width: 100px;padding: 10px; background-color: silver; border-radius: 20px; }
		td { border: 1px solid gray; width: 100px;padding: 10px; height: 80px; line-height: 30px; 
		     border-radius: 20px; text-align: right; vertical-align: bottom; }
		img:hover { cursor: pointer; }
	</style>
	</head>
	<body>
		<%
			LocalDate today = LocalDate.now();
			int year = today.getYear();
			int month = today.getMonthValue();
			// 년도와 월을 받아보자
			try{
				year = Integer.parseInt(request.getParameter("yy"));
			}catch(Exception E){ // 숫자로 변환하지 못하면 현재 년도를 가지자
				;
			}
			try{
				month = Integer.parseInt(request.getParameter("mm"));
			}catch(Exception E){
				;
			}
			// 사용자가 쿼리값을 임의 변경하여 유효하지 않은 값을 만들었다면 보정을 해주어야 한다.
			if(month==0){
				month = 12;
				year--;
			}
			if(month==13){
				month = 1;
				year++;
			}
			if(month<1 || month>12) month = today.getMonthValue();
			if(year<=0) year = today.getYear();
			
			// 해당 년월의 음력데이터를 가져오자!!!
			List<LunarVO> list = LunarUtil.getLunarData(application.getRealPath("lunarData"), year, month);
			
			// 1일의 요일과 그달의 마지막 날짜를 구해서 출력해보자
			int dayOfWeekNumber = list.get(0).getSolarIntWeek(); // 1일의 요일
			 
			// 2. 그달의 마지막 날짜 구하기
			int lastDay = list.size(); // 리스트의 개수가 마지막 날짜
	
		%>
		<table>
			<tr>
				<th colspan="2" class="title">
				<%-- ?를 링크를 걸면 자기 자신이다. --%>
					<img src="./images/first_page.png" onclick="location.href='?yy=<%=year-1 %>&mm=<%=month %>'" />
					<img src="./images/left.png" onclick="location.href='?yy=<%=year %>&mm=<%=month-1 %>'" />
				</th>
				<th colspan="3" class="title"><%=String.format("%04d년 %02d월", year, month) %></th>
				<th colspan="2" class="title">
					<img src="./images/right.png" onclick="location.href='?yy=<%=year %>&mm=<%=month+1 %>'"  />
					<img src="./images/last_page.png" onclick="location.href='?yy=<%=year+1 %>&mm=<%=month %>'"  />
				</th>
			</tr>
			<tr>
				<th>일</th>
				<th>월</th>
				<th>화</th>
				<th>수</th>
				<th>목</th>
				<th>금</th>
				<th>토</th>
			</tr>
			<tr>
				<%
					// 1일의 요일 위치를 맞추기 위해서 공백 셀을 출력한다.
					for(int i=0;i<dayOfWeekNumber;i++){
						out.println("<td>&nbsp;</td>");
					}
					// 1일 부터 마자막 날짜까자 출력해보자
					for(LunarVO vo : list){
						
						// 토요일 마다 줄바꿈을 해준다.
						dayOfWeekNumber = vo.getSolarIntWeek();
						if(dayOfWeekNumber==6){
							out.println("<td style='background-color:skyblue;'>" 
										+ vo.getSolarDate() 
										+ "<br>"
										+ vo.getLunarDate() + "("+ vo.getGanjiDateH() +")"
										+ "</td>"); // 토요일이면
						}else if(dayOfWeekNumber==0){
							out.println("<td style='background-color:pink;'>" 
										+ vo.getSolarDate() 
										+ "<br>"
										+ vo.getLunarDate() + "("+ vo.getGanjiDateH() +")"
										+ "</td>"); // 일요일이면
						}else{
							out.println("<td>" 
										+ vo.getSolarDate() 
										+ "<br>"
										+ vo.getLunarDate() + "("+ vo.getGanjiDateH() +")"
										+ "</td>"); // 평일이면
						}
						if(dayOfWeekNumber==6){ // 토요일이면 
							out.println("</tr>"); // 줄닫고
							if(Integer.parseInt(vo.getSolarDate(),10)!=lastDay){ // 마지막날짜가 토요일이 아니면 다음줄이 있다.
								out.println("<tr>"); // 줄열고
							}
						}
					}
					// 마지막 줄을 마무리 해보자
					if(dayOfWeekNumber<6){ // 마지막칸(토요일)까지 출력되지 않았다면 
						for(int i=dayOfWeekNumber+1;i<=6;i++){
							out.println("<td>&nbsp;</td>");
						}
					}
				%>
			</tr>
		</table>
	</body>
	</html>   	
   ===================================================================================================
 
        