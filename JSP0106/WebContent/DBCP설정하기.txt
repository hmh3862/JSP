DBCP 설정 순서
==============
1. META-INF/context.xml파일을 만든다.
---------------------------------------------------------------
<?xml version="1.0" encoding="UTF-8"?>
<Context>
  <Resource 
  name="jdbc/MariaDB" 
  auth="Container" 
  type="javax.sql.DataSource"
  maxTotal="100" 
  maxIdle="30" 
  maxWaitMillis="10000"
  username="javauser" 
  password="123456" 
  driverClassName="org.mariadb.jdbc.Driver"
  url="jdbc:mariadb://localhost:3306/javadb"/>

</Context>


-- 옵션(속성)을 자신의 DB것으로 맞게 설정한다.
maxActive >= initialSize
동시에 사용할 수 있는 최대 커넥션의 갯수(maxActive)가 10이고, 
최초 커넥션을 맺을 때 Pool에 생성되는 커넥션의 갯수(initialSize)가 20개라면, 
initialSize 값이 최대 커넥션 갯수인 maxActive 값보다 커서 논리적으로 오류가 있는 설정입니다.


maxIdle >= minIdle
당연하지만 최대로 유지할 커넥션의 갯수가 최소한으로 유지될 커넥션의 갯수보다 많아야 합니다.

maxActive = maxIdle
maxActive와 maxIdle 값이 동일한 것이 좋습니다. 
동시에 사용할 수 있는 최대 커넥션의 갯수(maxActive)가 20이고, 
Pool에 반납할 때 최대로 유지될 수 있는 커넥션의 갯수(maxIdle)가 10이라고 가정해 보겠습니다. 
커넥션을 동시에 10개를 사용하고 있는상황에서 1개의 커넥션이 추가로 요청된다면 '
maxActive = 20이므로 1개의 추가 커넥션을 데이터베이스에 연결한 후 Pool은 
비즈니스 로직으로 커넥션을 전달합니다. 이후 비즈니스 로직이 커넥션을 사용한 후 Pool에 반납할 경우,
 maxIdle = 10이므로 커넥션을 실제로 닫아버리므로, 일부 커넥션을 매번 생성했다 닫는 비용이 
 발생할 수 있습니다.

initialSize = maxActive = maxIdle = minIdle
위 네 가지의 설정은 동일한 값으로 통일해도 무방합니다. 
커넥션 갯수와 관련된 가장 중요한 성능 요소는 일반적으로 커넥션의 최대 갯수 입니다.
 따라서 위 항목의 설정 값 차이는 성능을 좌우하는 중요 변수는 아닙니다.
 
maxActive
maxActive의 값은 DBMS의 설정과 애플리케이션 서버 갯수, 
Apache, Tomcat 등에서 동시에 처리할 수 있는 사용자 수 등을 고려해서 설정해야 합니다. 
DBMS가 수용할 수 있는 커넥션의 갯수를 확인한 후 애플리케이션 서버 인스턴스 1개가 사용하기에 
적절한 갯수를 설정합니다. 만약 다수의 사용자가 요청을 하는 상황에서 커넥션을 많이 사용할 때 
maxActive의 값이 충분히 크지 않다면 병목 지점이 될 수 있습니다. 
반대로 사용자가 적어서 사용중인 커넥션이 많지 않은 시스템에서는 maxActive 값을 
지나치게 작게 설정하지 않는 한 성능에는 큰 영향이 없습니다.
---------------------------------------------------------------

2. web.xml에 리소스를 추가한다.
---------------------------------------------------------------
	<resource-ref>
		<description>DB Connection</description>
		<res-ref-name>jdbc/MariaDB</res-ref-name>
		<res-type>javax.sql.DataSource</res-type>
		<res-auth>Container</res-auth>
	</resource-ref>
	
-- 이때 주의 점은 	res-ref-name의 값이 context.xml의 name속성과 일치해야 한다.
---------------------------------------------------------------


3. 컨넥션 풀을 얻어서 사용하고 반납한다.
---------------------------------------------------------------
<%@page import="kr.green.jdbc.JDBCUtil"%>
<%@page import="java.sql.Connection"%>
<%@page import="javax.sql.DataSource"%>
<%@page import="javax.naming.InitialContext"%>
<%@page import="javax.naming.Context"%>
<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%
// Connection Pool에서 연결 자원(Connection)을 얻어온다,
Context initContext = new InitialContext();
Context envContext  = (Context)initContext.lookup("java:/comp/env");
// context.xml의 name속성과 일치해야 한다.
DataSource ds = (DataSource)envContext.lookup("jdbc/MariaDB");
Connection conn = ds.getConnection();
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
</head>
<body>
	<h1>연결성공 : <%=conn%></h1>
	
	<% JDBCUtil.close(conn); // 자원을 Connection Pool로 반환한다. %>
</body>
</html>
---------------------------------------------------------------


4. 매번 연결할때 마다 코드를 입력하기가 불편하면 클래스로 뺀다.
   JDBCUtil.java에 메서드를 1개 추가하자
-----------------------------------------------------------------------   
	public static Connection getDBCP(){
		Connection conn = null;
		// Connection Pool에서 연결 자원(Connection)을 얻어온다,
		Context initContext = null;
		try {
			initContext = new InitialContext();
			Context envContext  = (Context)initContext.lookup("java:/comp/env");
			DataSource ds = (DataSource)envContext.lookup("jdbc/MariaDB");
			conn = ds.getConnection();	
		} catch (NamingException e) {
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return conn;
	}
-----------------------------------------------------------------------   