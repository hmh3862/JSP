자유게시판 만들기
-----------------
1. 어디에 저장할까? -- mariaDB
2. 무엇을 저장할까?
   글번호
   작성자
   비밀번호
   제목
   내용
   조회수
   작성일
   아이피
   
3. 테이블을 만들자!!!
   create table board(
   		idx int primary key auto_increment,
   		name varchar(30) not null,
   		password varchar(50) not null,
   		subject varchar(100) not null,
   		content text not null,
   		hit int default 0,
   		regDate timestamp default now(),
   		ip varchar(20) not null
   ); 
   
4. DB에 접속하여 실제 테이블을 만들어 넣자
================================================================================
-- 자유 게시판 테이블 작성
create table board(
   		idx int primary key auto_increment,
   		name varchar(30) not null,
   		password varchar(50) not null,
   		subject varchar(100) not null,
   		content text not null,
   		hit int default 0,
   		regDate timestamp default now(),
   		ip varchar(20) not null
   ); 

  desc board;
  select * from board;
--------------------------------------------------------------------------------
5. 패키지 3개를 만들자
================================================================================
	kr.green.board.vo  
	kr.green.board.dao  
	kr.green.board.service  
--------------------------------------------------------------------------------
6. VO패키지에 클래스 2개를 만들자
================================================================================
	BoardVO.java  -- 테이블과 1:1 대응 되도록 만든다.    
--------------------------------------------------------------------------------
package kr.green.board.vo;

import java.util.Date;

import javax.xml.bind.annotation.XmlRootElement;

import lombok.Data;

/*
create table board(
   		idx int primary key auto_increment,
   		name varchar(30) not null,
   		password varchar(50) not null,
   		subject varchar(100) not null,
   		content text not null,
   		hit int default 0,
   		regDate timestamp default now(),
   		ip varchar(20) not null
); 
 */
@XmlRootElement // 혹시라도  XML로 출력할 일이 발생할때를 대비하기 위해서
@Data // 기본생성자/겟터/셑터/toString ... 을 자동으로 만들어 준다.
public class BoardVO {
	private int    idx;
	private String name;
	private String password;
	private String subject;
	private String content;
	private int    hit;
	private Date   regDate;
	private String ip;
}
================================================================================
    PagingVO.java -- 어떤 VO도 모두 처리 가능하도록 제네릭으로 만들자
--------------------------------------------------------------------------------
package kr.green.board.vo;

import java.util.List;

public class PagingVO<T> {
	private int currentPage;
	private int pageSize;
	private int blockSize;
	private int totalCount;

	private int totalPage;
	private int startNo;
	private int endNo;
	private int startPage;
	private int endPage;

	private List<T> list;

	public PagingVO(int currentPage, int pageSize, int blockSize, int totalCount) {
		super();
		this.currentPage = currentPage;
		this.pageSize = pageSize;
		this.blockSize = blockSize;
		this.totalCount = totalCount;
		calc();
	}

	private void calc() {
		if (currentPage <= 0)
			currentPage = 1;
		if (pageSize < 2)
			pageSize = 10;
		if (blockSize < 2)
			blockSize = 10;

		if (totalCount > 0) {
			totalPage = (totalCount - 1) / pageSize + 1;
			if (currentPage > totalPage)
				currentPage = 1;

			startNo = (currentPage - 1) * pageSize;
			endNo = startNo + pageSize - 1;
			if (endNo >= totalCount)
				endNo = totalCount - 1;

			startPage = (currentPage - 1) / blockSize * blockSize + 1;
			endPage = startPage + blockSize - 1;
			if (endPage > totalPage)
				endPage = totalPage;
		}
	}

	public List<T> getList() {
		return list;
	}

	public void setList(List<T> list) {
		this.list = list;
	}

	public int getCurrentPage() {
		return currentPage;
	}

	public int getPageSize() {
		return pageSize;
	}

	public int getBlockSize() {
		return blockSize;
	}

	public int getTotalCount() {
		return totalCount;
	}

	public int getTotalPage() {
		return totalPage;
	}

	public int getStartNo() {
		return startNo;
	}

	public int getEndNo() {
		return endNo;
	}

	public int getStartPage() {
		return startPage;
	}

	public int getEndPage() {
		return endPage;
	}

	@Override
	public String toString() {
		return "PagingVO [currentPage=" + currentPage + ", pageSize=" + pageSize + ", blockSize=" + blockSize
				+ ", totalCount=" + totalCount + ", totalPage=" + totalPage + ", startNo=" + startNo + ", endNo="
				+ endNo + ", startPage=" + startPage + ", endPage=" + endPage + ", list=" + list + "]";
	}

	// 페이지 상단에 표시할 메서드를 추가하자
	public String getPageInfo() {
		String result = "전체 : " + totalCount + "개";
		if (totalCount > 0)
			result += "(" + currentPage + "/" + totalPage + "Page)";
		return result;
	}

	// 페이지 하단에 표시할 메서드를 추가하자!!!
	public String getPageList() {
		StringBuffer sb = new StringBuffer();
		sb.append("<ul class='pagination pagination-sm justify-content-center'>");
		// "이전"은 시작페이지 번호가 1보다 크다면 있다.
		if (startPage > 1) {
			sb.append("<li class='page-item'>");
			sb.append("<a class='page-link' href='?p=" + (startPage - 1) + "&s=" + pageSize + "&b=" + blockSize
					+ "' aria-label='Previous'>");
			sb.append("<span aria-hidden='true'>&laquo;</span>");
			sb.append("</a>");
			sb.append("</li>");
		}
		// 페이지 번호들을 출력해준다.
		for (int i = startPage; i <= endPage; i++) {
			if (i != currentPage) { // 현재 페이지가 아니면 링크를 걸고
				sb.append("<li class='page-item'><a class='page-link' href='?p=" + (i) + "&s=" + pageSize + "&b="
						+ blockSize + "'>" + i + "</a></li>");
			} else { // 현재 페이지는 링크를 걸지 않는다.
				sb.append("<li class='page-item active' aria-current='page'><a class='page-link' href='#'>" + i
						+ "</a></li>");
			}
		}
		// "다음"은 끝 페이지번호가 전체 페이지 번호보다 적다면 있다.
		if (endPage < totalPage) {
			sb.append("<li class='page-item'>");
			sb.append("<a class='page-link' href='?p=" + (endPage + 1) + "&s=" + pageSize + "&b=" + blockSize
					+ "' aria-label='Previous'>");
			sb.append("<span aria-hidden='true'>&raquo;</span>");
			sb.append("</a>");
			sb.append("</li>");
		}
		sb.append("</ul>");
		return sb.toString();
	}

}
--------------------------------------------------------------------------------
  7. PagingVO를 테스트해보자!!!
================================================================================
PagingTest.jsp		
--------------------------------------------------------------------------------
<%@page import="kr.green.board.vo.PagingVO"%>
<%@page import="java.util.ArrayList"%>
<%@page import="java.util.List"%>
<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%
	int currentPage = 1;
	try{
		currentPage = Integer.parseInt(request.getParameter("p"));
	}catch(Exception e) { ; }

	int pageSize = 10;
	try{
		pageSize = Integer.parseInt(request.getParameter("s"));
	}catch(Exception e) { ; }

	int blockSize = 10;
	try{
		blockSize = Integer.parseInt(request.getParameter("b"));
	}catch(Exception e) { ; }


	List<String> list = new ArrayList<>();
	for(int i=0;i<456;i++){
		list.add("String " + (i+1));
	}

	PagingVO<String> pagingVO = new PagingVO<>(currentPage, pageSize, blockSize, list.size());
	pagingVO.setList(list);
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Insert title here</title>
<%-- 부트스트랩을 사용하기 위한 준비 시작 --%>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" ></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<meta name="viewport" content="width=device-width, initial-scale=1">
<%-- 부트스트랩을 사용하기 위한 준비 끝 --%>
<script type="text/javascript">

</script>
<style type="text/css">

</style>
</head>
<body>
	<%=pagingVO.getPageInfo() %> <br /><hr />
	<%//=pagingVO %>
	<%
		for(int i=pagingVO.getStartNo();i<=pagingVO.getEndNo();i++){
			out.println(list.get(i) + "<br>");
		}
	%>
	<br /><hr />
	<%=pagingVO.getPageList() %>
</body>
</html>
--------------------------------------------------------------------------------
  8. BoardDAO를 만들자
================================================================================
BoardDAO.java -- 인터페이스를 만들자
--------------------------------------------------------------------------------
package kr.green.board.dao;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

import kr.green.board.vo.BoardVO;

public interface BoardDAO {
	// 1. 개수 구하기
	int selectCount(Connection conn) throws SQLException;
	// 2. 1개얻기
	BoardVO selectByIdx(Connection conn, int idx) throws SQLException;
	// 3. 1페이지 얻기
	List<BoardVO> selectList(Connection conn, int startNo, int pageSize) throws SQLException;
	// 4. 저장
	int insert(Connection conn, BoardVO vo) throws SQLException;
	// 5. 수정
	int update(Connection conn, BoardVO vo) throws SQLException;
	// 6. 삭제
	int delete(Connection conn, int idx) throws SQLException;
	// 7. 비번확인
	int passwordCheck(Connection conn, int idx, String password) throws SQLException;
	// 8. 조회수 증가
	int incrementHit(Connection conn, int idx) throws SQLException;
}

--------------------------------------------------------------------------------
BoardDAOImpl.java -- 인터페이스를 구현한 클래스를 만들자
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

  9. BoardService를 만들자
================================================================================
BoardService.java -- 인터페이스를 만들자
--------------------------------------------------------------------------------
package kr.green.board.service;

import kr.green.board.vo.BoardVO;
import kr.green.board.vo.PagingVO;

public interface BoardService {
	// 로직 1개당 1개의 메서드로 작성
	// 1. 목록보기
	PagingVO<BoardVO> selectList(int currentPage, int pageSize, int blockSize);
	// 2. 1개 얻기 -- 내용보기, 수정폼, 삭제폼
	BoardVO selectByIdx(int idx, boolean isHit); // isHit는 조회수 증가여부 판단
	// 3. 새글쓰기
	int insert(BoardVO vo);
	// 4. 수정하기
	int update(BoardVO vo);
	// 5. 삭제하기
	int delete(BoardVO vo);
}
--------------------------------------------------------------------------------
BoardServiceImpl.java -- 인터페이스를 구현한 클래스를 만들자
--------------------------------------------------------------------------------

--------------------------------------------------------------------------------

  10. JSP파일을 만들자
================================================================================
	include.jsp  -- 모든 파일에 공통으로 들어가는 코드
	index.jsp -- 목록보기
	view.jsp  -- 내용보기
	insert.jsp -- 새글 쓰기 폼
	update.jsp -- 수정 하기 폼
	delete.jsp -- 삭제 하기 폼
	updateOk.jsp -- 데이터를 받아 실제 저장/수정/삭제를 처리하는 파일 
--------------------------------------------------------------------------------

================================================================================
include.jsp
--------------------------------------------------------------------------------
<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%
// 여러개의 파일에 공통으로 들어가는 코드는 별도로 만들어 놓고 필요시 포함해서 사용하면 좋다.

// POST전송시 한글깨짐 방지
request.setCharacterEncoding("UTF-8");

// 현재 페이지 번호 받기
int currentPage = 1;
try{
	currentPage = Integer.parseInt(request.getParameter("p"));
}catch(Exception e){
	;
}

// 페이지 사이즈 받기
int pageSize = 10;
try{
	pageSize = Integer.parseInt(request.getParameter("s"));
}catch(Exception e){
	;
}

// 페이지 개수 받기
int blockSize = 10;
try{
	blockSize = Integer.parseInt(request.getParameter("b"));
}catch(Exception e){
	;
}

// 글번호 받기
int idx = 0;
try{
	idx = Integer.parseInt(request.getParameter("idx"));
}catch(Exception e){
	;
}

// 수정(2)/삭제(3)/저장(1)인지를 구분하는 값 받기
int mode = 0;
try{
	mode = Integer.parseInt(request.getParameter("m"));
}catch(Exception e){
	;
}

// 조회수 증가여부를 판단하는 값 받기 (0 : 증가않함, 1: 증가)
int incHit = 0;
try{
	incHit = Integer.parseInt(request.getParameter("h"));
}catch(Exception e){
	;
}

request.setAttribute("p", currentPage);
request.setAttribute("s", pageSize);
request.setAttribute("b", blockSize);
request.setAttribute("idx", idx);
request.setAttribute("m", mode);
request.setAttribute("h", incHit);
%>
================================================================================
index.jsp
--------------------------------------------------------------------------------
<%@page import="java.text.SimpleDateFormat"%>
<%@page import="kr.green.board.service.BoardServiceImpl"%>
<%@page import="kr.green.board.service.BoardService"%>
<%@page import="kr.green.board.dao.BoardDAOImpl"%>
<%@page import="kr.green.board.vo.BoardVO"%>
<%@page import="kr.green.board.vo.PagingVO"%>
<%@ page contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%-- 공통코드 삽입 --%>
<%@ include file="include.jsp" %>
<%
	// 1페이지 분량의 글을 얻어온다.
	PagingVO<BoardVO> pagingVO = BoardServiceImpl.getInstance().selectList(currentPage, pageSize, blockSize);
	request.setAttribute("pv", pagingVO);
%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>자유게시판 목록보기</title>
<%-- 부트스트랩을 사용하기 위한 준비 시작 --%>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" ></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
<%-- 부트스트랩을 사용하기 위한 준비 끝 --%>
<script type="text/javascript">

</script>
<style type="text/css">
	table { width: 1000px; margin: auto; padding: 5px;}
	th {padding: 5px; border: 1px solid gray; background-color: silver;text-align: center;}
	td {padding: 5px; border: 1px solid gray; text-align: center;}
	.title {border: none; font-size: 20pt; text-align: center;}
	.sub_title {border: none; text-align: right;}
	/* 링크의 모양을 변경한다. */
	a:link 		{ color: black; text-decoration: none;} /* 링크가 걸린모양 */
	a:visited 	{ color: black; text-decoration: none;} /* 방문했던 링크 */
	a:hover 	{ color: black; text-decoration: none; font-weight: bold;} /* 마우스오버시 모양 */
	a:active 	{ color: orange; text-decoration: none;} /* 마우스 클릭시 모양 */
</style>
</head>
<body>
	<table>
		<tr>
			<td class="title" colspan="6">자유게시판</td>
		</tr>
		<tr>
			<td class="sub_title" colspan="6">${pv.pageInfo }</td>
		</tr>
		<tr>
			<th>No</th>
			<th width="50%">제목</th>
			<th>작성자</th>
			<th>작성일</th>
			<th>조회수</th>
			<th>IP</th>
		</tr>
		<%
			if(pagingVO.getTotalCount()==0){
				out.println("<tr><td colspan='6' align='center'>등록된 글이 없습니다.</td></tr>");
			}else{
				for(BoardVO vo : pagingVO.getList()){
		%>
		<tr>
			<td><%=vo.getIdx() %></td>
			<td style="text-align: left;">
				<%
					String subject = vo.getSubject();
					subject = subject.replaceAll("<", "&lt;");
					if(subject.length()>=20){
						subject = subject.substring(0, 20) + "....";
					}
				%>
				<a title="<%=vo.getSubject() %>" href="view.jsp?p=${pv.currentPage }&s=${pv.pageSize }&b=${pv.blockSize }&idx=<%=vo.getIdx() %>&h=1"> <%=subject %></a>
			</td>
			<td>
			<%
				String name = vo.getName();
				name = name.replaceAll("<", "&lt;");
				out.println(name);
			%>
			</td>
			<td>
			<%
			SimpleDateFormat sdf = new SimpleDateFormat("yy-MM-dd hh:mm");
			out.println(sdf.format(vo.getRegDate())); 
			%>
			</td>
			<td><%=vo.getHit() %></td>
			<td><%=vo.getIp() %></td>
		</tr>
		<%  	} 
				if(pagingVO.getTotalCount()>0){
					out.println("<tr><td colspan='6' align='center' style='border:none;'>" + pagingVO.getPageList() + "</td></tr>");
				}
			}
		%>
		<tr>
			<td class="sub_title" colspan="6">
				<button class="btn btn-outline-success btn-sm" 
				onclick="location.href='insert.jsp?p=${pv.currentPage}&s=${pv.pageSize }&b=${pv.blockSize }'">새글쓰기</button>
			</td>
		</tr>
	</table>
</body>
</html>
================================================================================
view.jsp
--------------------------------------------------------------------------------


